{"version":3,"sources":["assets/MediaPlayer.js","assets/plugins/AutoPlay.js","assets/plugins/AutoPause.js","assets/index.js"],"names":["MediaPlayer","config","media","el","plugins","_initPlugins","prototype","player","play","pause","muted","value","forEach","plugin","run","togglePlay","paused","mute","unmute","AutoPlay","AutoPause","threshold","handleIntersection","bind","handleVisibilityChange","observer","IntersectionObserver","observe","document","addEventListener","entries","entry","isVisible","intersectionRatio","visibilityState","video","querySelector","playButton","onclick","muteButton","navigator","serviceWorker","register","catch","error","console","log"],"mappings":";;AGAA;;AACA;;AACA;AHFA,ACAA,SDASA,ACAAmB,QAAT,GDAA,ACAoB,CDAClB,ACAC,MDAtB,EAA6B;AAC3B,OAAKC,KAAL,GAAaD,MAAM,CAACE,EAApB;AACA,ACDFgB,ODCOf,CCDC,CAACE,KDCP,GAAeL,CCDjB,CAAmBa,GAAnB,CDCuB,CAACV,CCDC,MDCR,IAAkB,ACDDG,EDChC,ICDuB,EAAiB;AEG1C,AFFE,IEEI4B,EFFA,CAAC5B,EEEI,GAAGqB,CFFD,CAAClB,KAAZ,CEEoB,CAAC0B,AFFF,aEEP,CAAuB,OAAvB,CAAd;AHAE,AGCF,AFFI7B,IEEEA,AFFFA,GDCGF,GGCK,AFFF,CAACK,EEEI,GFFX,CEEeV,EHDjB,ACDiB,IAAf,cEEW,CAAgB;AHA9B,AGCCG,AFFC,EEEDA,EAAE,EAAEgC,KADyB;AAE7B/B,EAAAA,EDPIgB,KCOG,EAAE,CAAC,IAAID,iBAAJ,EAAD,EAAiB,IAAIC,kBAAJ,EAAjB;AHAXpB,AGF+B,ADJ7B,ADIAO,CEAa,CAAf,AFAEA,MAAM,CAACC,EDEE,CAACF,CCFV,QDEF,CAAsBD,CENN,WFMhB,GAAqC,YAAW;AAAA,AGGhD,ADTgB,ADKf,CALD,GESMgC,UAAU,GAAGT,QAAQ,CAACQ,aAAT,CAAuB,aAAvB,CAAnB;;AHFE,AGGFC,ADTI,MFMI9B,GENCc,CCSC,CAACiB,CHHG,GAAG,ACAFnB,GEGf,ADTI,GCSiB,ADTA,IAAjB;AFOAX,AGEiB,ADRjB,IFMAA,IAAI,CGEmBD,ADRlBe,CFMC,KGEuB,CAACP,UAAP,CDRvB,CCQiB,EDRS,KAAKO,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AFMM,AGEW,ADPjB,CCOJ,QDPSC,IFKO,KAAI,CAAChB,IAAL,EAAN,MELN,GAA8B,KAAKgB,sBAAL,CAA4BD,IAA5B,CAAiC,IAAjC,CAA9B;AFKM,AEJP,KFGc;AAEbd,AGGJ,IHHIA,AGGE8B,KHHG,EAAE,GGGK,GAAGX,QAAQ,CAACQ,aAAT,CAAuB,aAAvB,CAAnB;AHHW,aAAM,KAAI,CAAC3B,KAAL,EAAN;AAAA,AGIX8B,KHNiB,KGMP,CAACD,OAAX,GAAqB,YAAM;AHHvBpC,AGIF,IHJEA,EGIEK,GHJG,EAAE,CGIC,CAACL,GHJGA,EGIV,CAAaQ,EHPF,GGOf,ADRIH,ECQoB,MDRZ;ACSVA,ADRA,ICQAA,MAAM,CAACW,ADRFX,MCQL,ADRA,GAAcA,MAAd;AFIA,AGKD,ADPC,GCKF,KHHMG,CGKC,CDPCe,GFEN,GAAY,EEFE,GAAG,IAAIC,oBAAJ,CAAyB,KAAKJ,kBAA9B,EAAkD;AFGjE,AGKFf,ADPEc,ICOFd,IDPEc,ECOI,CAACJ,EHLE,EGKT,EDPW,CFEGf,CEFD,IFEJ,CAAWQ,AEFFW,KFEhB;AACD,AGKF,ADToE,KFFtD,EEEI,CAAjB;ACUH,ADNGI,CCAJ,KDAIA,QAAQ,CAACE,OAAT,CAAiB,KAAKpB,MAAL,CAAYL,KAA7B;AFCA,AECA0B,MAAAA,EFDIlB,KAAJ,CAAUC,AECF,CAACkB,IFDT,EAAiB,UECjB,CAA0B,kBAA1B,EAA8C,KAAKL,sBAAnD;AFAE,AGON,ADNG,ICMC,OHPOtB,KAAL,CAAWQ,KAAX,CGOiB8B,EHPE7B,KAAnB,EGON,EAAkC;AHN7B,AGOH6B,EAAAA,SAAS,CAACC,aAAV,CAAwBC,QAAxB,CAAiC,sCAAjC,EAA2CC,KAA3C,CAAiD,UAACC,KAAD,EAAS;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AHjBa,AGkBd,GHlBD,AGgBA,oCDLmBd,SAAS;AFC5B,AGOD,ADPG,OFAG1B,GEAG2B,IFAR,CAAanB,AEAA,GAAGkB,IFAhB,CAAqB,EEAE,CAAC,CAAD,CAArB,KFAmBjB,MAAM,EAAI;AAC7BA,AECA,IFDAA,MAAM,AECAmB,CFDClB,GAAP,CAAWP,IECI,EFDf,CECkBwB,KAAK,CAACE,iBAAN,IAA2B,KAAKZ,SAAlD;AFAD,GAFD;AAGD,AECG,CFjBJ,SEiBQW,SAAJ,EAAe;AACb,aAAKzB,MAAL,CAAYC,IAAZ;AFANR,AECK,OAFD,IFCO,CAACM,CECD,QFDX,CAAsBE,IAAtB,GAA6B,YAAW;AACtC,AECI,OFDCN,KAAL,CAAWM,AECFD,IFDT,EECI,CAAYE,KAAZ;AFAL,AECI,CFHL;AEIG;AFAHT,WAAW,CAACM,SAAZ,CAAsBG,KAAtB,GAA8B,YAAW;AACvC,OAAKP,KAAL,CAAWO,KAAX;AACD,CAFD,4CEE2B;AACvB,UAAMuB,SAAS,GAAGJ,QAAQ,CAACM,eAAT,KAA6B,SAA/C;AFCJlC,WAAW,CAACM,SAAZ,CAAsBS,UAAtB,GAAmC,YAAW;AAC5C,AEDE,MFCE,IEDEiB,CFCG9B,KAAL,CAAWc,EEDb,EAAe,EFCjB,EAAuB;AACrB,AEDE,SFCGR,IAAL,AEDOD,MAAL,CAAYC,IAAZ;AFEH,AEDE,GFDH,IEDE,EFGK,IEDE;AFEP,AEDE,SFCGC,IEDEF,CFCP,KEDE,CAAYE,KAAZ;AFEH,AEDE;AFEJ,AEDE,CFLH;;AAQAT,WAAW,CAACM,SAAZ,CAAsBW,IAAtB,GAA6B,YAAW;AACtC,OAAKf,KAAL,CAAWQ,KAAX,GAAmB,IAAnB;AACD,CAFD;;AAIAV,WAAW,CAACM,GEJGc,MFIf,CAAsBF,MAAtB,GAA+B,YAAW;AACxC,OAAKhB,KAAL,CAAWQ,KAAX,GAAmB,KAAnB;AACD,CAFD;;eAIeV","file":"assets.8f4429fc.js","sourceRoot":"..","sourcesContent":["function MediaPlayer(config) {\n  this.media = config.el;\n  this.plugins = config.plugins || [];\n\n  this._initPlugins();\n}\n\nMediaPlayer.prototype._initPlugins = function() {\n  const player = {\n    play: () => this.play(),\n    pause: () => this.pause(),\n    media: this.media,\n    get muted() {\n      return this.media.muted;\n    },\n    set muted(value) {\n      this.media.muted = value;\n    },\n  };\n\n  this.plugins.forEach(plugin => {\n    plugin.run(player);\n  });\n};\n\nMediaPlayer.prototype.play = function() {\n  this.media.play();\n};\n\nMediaPlayer.prototype.pause = function() {\n  this.media.pause();\n};\n\nMediaPlayer.prototype.togglePlay = function() {\n  if (this.media.paused) {\n    this.play();\n  } else {\n    this.pause();\n  }\n};\n\nMediaPlayer.prototype.mute = function() {\n  this.media.muted = true;\n};\n\nMediaPlayer.prototype.unmute = function() {\n  this.media.muted = false;\n};\n\nexport default MediaPlayer;\n","function AutoPlay() {}\nAutoPlay.prototype.run = function(player) {\n  if (!player.muted) {\n    player.muted = true;\n  }\n  player.play();\n};\n\nexport default AutoPlay;\n","class AutoPause {\n  constructor() {\n    this.threshold = 0.25;\n    this.handleIntersection = this.handleIntersection.bind(this);\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n  }\n\n  run(player) {\n    this.player = player;\n\n    const observer = new IntersectionObserver(this.handleIntersection, {\n      threshold: this.threshold,\n    });\n\n    observer.observe(this.player.media);\n\n    document.addEventListener('visibilitychange', this.handleVisibilityChange);\n  }\n\n  handleIntersection(entries) {\n    const entry = entries[0];\n\n    const isVisible = entry.intersectionRatio >= this.threshold;\n\n    if (isVisible) {\n      this.player.play();\n    } else {\n      this.player.pause();\n    }\n  }\n\n  handleVisibilityChange() {\n    const isVisible = document.visibilityState === 'visible';\n    if (isVisible) {\n      this.player.play();\n    } else {\n      this.player.pause();\n    }\n  }\n}\n\nexport default AutoPause;\n","import MediaPlayer from './MediaPlayer.js';\nimport AutoPlay from './plugins/AutoPlay.js';\nimport AutoPause from './plugins/AutoPause.js';\n\nconst video = document.querySelector('video');\nconst player = new MediaPlayer({\n  el: video,\n  plugins: [new AutoPlay(), new AutoPause()],\n});\n\nconst playButton = document.querySelector('#playButton');\nplayButton.onclick = () => player.togglePlay();\n\nconst muteButton = document.querySelector('#muteButton');\nmuteButton.onclick = () => {\n  if (player.media.muted) {\n    player.unmute();\n  } else {\n    player.mute();\n  }\n};\n\n\nif ('serviceWorker' in navigator ){\n  navigator.serviceWorker.register('/sw.js').catch((error)=>{\n    console.log(error)\n  })\n}"]}